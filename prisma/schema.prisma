generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model checkins {
  id               Int         @id @default(autoincrement())
  slack_user_id    String      @db.VarChar(255)
  slack_channel_id String      @db.VarChar(255)
  feeling          String?     @db.VarChar(255)
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  blocker          String?
  teams            teams       @relation(fields: [slack_channel_id], references: [slack_channel_id], onDelete: Cascade, onUpdate: NoAction)
  users            users       @relation(fields: [slack_user_id], references: [slack_user_id], onDelete: Cascade, onUpdate: NoAction)
  checkouts        checkouts[]
  goals            goals[]
}

model checkouts {
  id            Int             @id @default(autoincrement())
  checkin_id    Int
  feeling       String?         @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  blocker       String?
  checkins      checkins        @relation(fields: [checkin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  goal_progress goal_progress[]
}

model goal_progress {
  id          Int       @id @default(autoincrement())
  goal_id     Int
  checkout_id Int
  is_met      Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  checkouts   checkouts @relation(fields: [checkout_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  goals       goals     @relation(fields: [goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model goals {
  id            Int             @id @default(autoincrement())
  checkin_id    Int
  goal_text     String
  is_smart      Boolean?        @default(false)
  goal_progress goal_progress[]
  checkins      checkins        @relation(fields: [checkin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model roles {
  id               Int     @id @default(autoincrement())
  role_name        String  @unique @db.VarChar(255)
  can_view_reports Boolean @default(false)
  can_manage_teams Boolean @default(false)
  can_manage_users Boolean @default(false)
  can_manage_roles Boolean @default(false)
  users            users[]
}

model sessions {
  id         Int      @id @default(autoincrement())
  user_id    Int
  expires_at DateTime @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teams {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  slack_channel_id   String               @unique @db.VarChar(255)
  checkins           checkins[]
  user_team_mappings user_team_mappings[]
}

model user_team_mappings {
  id      Int   @id @default(autoincrement())
  user_id Int
  team_id Int
  teams   teams @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  slack_user_id      String               @unique @db.VarChar(255)
  role_id            Int
  checkins           checkins[]
  sessions           sessions[]
  user_team_mappings user_team_mappings[]
  roles              roles                @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
