generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model checkins {
  id               Int       @id @default(autoincrement())
  slack_user_id    String    @db.VarChar(50)
  slack_channel_id String    @db.VarChar(50)
  goals            String
  blockers         String?
  feeling          String?   @db.VarChar(20)
  is_smart_goal    Boolean?  @default(false)
  date             DateTime  @default(dbgenerated("CURRENT_DATE")) @db.Date
  created_at       DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model checkouts {
  id               Int       @id @default(autoincrement())
  slack_user_id    String    @db.VarChar(50)
  slack_channel_id String    @db.VarChar(50)
  updates          String
  blockers         String?
  goals_met        Boolean?  @default(false)
  feeling          String?   @db.VarChar(20)
  date             DateTime  @default(dbgenerated("CURRENT_DATE")) @db.Date
  created_at       DateTime? @default(now()) @db.Timestamp(6)
}

model roles {
  id                Int                 @id @default(autoincrement())
  role_name         String              @unique @db.VarChar(50)
  user_role_mapping user_role_mapping[]
}

model sessions {
  id         Int       @id @default(autoincrement())
  user_id    Int
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teams {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(100)
  slack_channel_id  String              @unique @db.VarChar(50)
  user_team_mapping user_team_mapping[]
}

model user_role_mapping {
  id         Int       @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role_id])
}

model user_team_mapping {
  id         Int       @id @default(autoincrement())
  user_id    Int
  team_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, team_id])
}

model users {
  id                Int                 @id @default(autoincrement())
  email             String              @unique @db.VarChar(255)
  password          String
  slack_user_id     String              @unique @db.VarChar(50)
  sessions          sessions[]
  user_role_mapping user_role_mapping[]
  user_team_mapping user_team_mapping[]
}
