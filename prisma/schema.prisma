generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model checkins {
  id               Int         @id @default(autoincrement())
  slack_user_id    String      @db.VarChar(255)
  slack_channel_id String      @db.VarChar(255)
  feeling          String?     @db.VarChar(255)
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  blocker          String?
  checkin_date     DateTime?   @db.Date
  teams            teams       @relation(fields: [slack_channel_id], references: [slack_channel_id], onDelete: Cascade, onUpdate: NoAction)
  users            users       @relation(fields: [slack_user_id], references: [slack_user_id], onDelete: Cascade, onUpdate: NoAction)
  checkouts        checkouts[]
  goals            goals[]
}

model checkouts {
  id            Int             @id @default(autoincrement())
  checkin_id    Int
  feeling       String?         @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  blocker       String?
  checkout_date DateTime?       @db.Date
  checkins      checkins        @relation(fields: [checkin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  goal_progress goal_progress[]
}

model goal_progress {
  id          Int       @id @default(autoincrement())
  goal_id     Int       @unique(map: "uq_goals_progress_goal_id")
  checkout_id Int
  is_met      Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  checkouts   checkouts @relation(fields: [checkout_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  goals       goals     @relation(fields: [goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model goals {
  id            Int            @id @default(autoincrement())
  checkin_id    Int
  goal_text     String
  is_smart      Boolean?       @default(false)
  goal_progress goal_progress?
  checkins      checkins       @relation(fields: [checkin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_goals_checkin")
}

model roles {
  id             Int              @id @default(autoincrement())
  role_name      String           @unique @db.VarChar(255)
  user_team_role user_team_role[]
}

model sessions {
  id         Int      @id @default(autoincrement())
  user_id    Int
  expires_at DateTime @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teams {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  slack_channel_id   String               @unique @db.VarChar(255)
  is_active          Boolean              @default(true)
  teaminfo           String?
  checkins           checkins[]
  user_team_mappings user_team_mappings[]
  user_team_role     user_team_role[]
}

model user_team_mappings {
  id      Int   @id @default(autoincrement())
  user_id Int
  team_id Int
  teams   teams @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, team_id], map: "unique_user_team")
}

model users {
  id                  Int                   @id @default(autoincrement())
  first_name          String                @db.VarChar(255)
  email               String                @unique @db.VarChar(255)
  slack_user_id       String?               @unique @db.VarChar(255)
  timezone            String?
  about_you           String?
  location            String?
  last_name           String?
  title               String?
  check_in_time       DateTime              @default(now()) @db.Time(6)
  check_out_time      DateTime              @default(now()) @db.Time(6)
  is_active           Boolean?              @default(true)
  slack_access_token  String?               @db.VarChar(255)
  is_admin            Boolean               @default(false)
  checkins            checkins[]
  sessions            sessions[]
  user_team_mappings  user_team_mappings[]
  user_team_role      user_team_role[]
  users_notifications users_notifications[]
}

model users_notifications {
  id                  Int       @id @default(autoincrement())
  user_id             Int
  notification_type   String    @db.VarChar(255)
  notification_status String    @default("pending") @db.VarChar(255)
  retry_count         Int       @default(0)
  error_message       String?   @db.VarChar(255)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  users               users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_team_role {
  id      Int   @id @default(autoincrement())
  user_id Int
  team_id Int
  role_id Int
  roles   roles @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teams   teams @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, team_id, role_id], map: "uq_user_team_role")
}
